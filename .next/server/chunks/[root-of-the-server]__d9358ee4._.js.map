{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/naazbook/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/naazbook/auth.ts"],"sourcesContent":["export const runtime = 'nodejs'\r\nimport NextAuth from \"next-auth\"\r\nimport { prisma } from \"@/lib/prisma\"\r\nimport CredentialsProvider from \"next-auth/providers/credentials\"\r\nimport { compare } from \"bcryptjs\"\r\nimport crypto from \"crypto\";\r\n\r\n// Enhanced types for better type safety\r\ninterface ExtendedUser {\r\n  id: string\r\n  email: string\r\n  name: string | null\r\n  role: string\r\n  lastLogin?: string\r\n}\r\n\r\ninterface ExtendedToken {\r\n  id: string\r\n  role: string\r\n  lastLogin?: string\r\n  error?: string\r\n}\r\n\r\nexport const { handlers, signIn, signOut, auth } = NextAuth({\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" }\r\n      },\r\n      async authorize(credentials: any): Promise<ExtendedUser | null> {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null\r\n        }\r\n\r\n        try {\r\n          const user = await prisma.user.findUnique({\r\n            where: {\r\n              email: credentials.email\r\n            }\r\n          })\r\n\r\n          if (!user || !user.password) {\r\n            return null\r\n          }\r\n\r\n          const isPasswordValid = await compare(credentials.password, user.password as string)\r\n\r\n          if (!isPasswordValid) {\r\n            return null\r\n          }\r\n\r\n          // Update last login\r\n          // await prisma.user.update({\r\n          //   where: { id: user.id },\r\n          //   data: { lastLogin: new Date() }\r\n          // })\r\n\r\n          return {\r\n            id: user.id,\r\n            email: user.email,\r\n            name: user.name,\r\n            role: user.role,\r\n            lastLogin: new Date().toISOString()\r\n          }\r\n        } catch (error) {\r\n          console.error('Auth error:', error)\r\n          return null\r\n        }\r\n      }\r\n    })\r\n  ],\r\n  session: {\r\n    strategy: \"jwt\",\r\n    maxAge: 30 * 24 * 60 * 60, // 30 days\r\n    updateAge: 24 * 60 * 60, // 24 hours\r\n  },\r\n  jwt: {\r\n    maxAge: 30 * 24 * 60 * 60, // 30 days\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user, account, trigger, session }) {\r\n      if (user) {\r\n        token.role = (user as any).role;\r\n        token.id = user.id;\r\n        token.lastLogin = new Date().toISOString();\r\n        // Session fingerprinting: hash user-agent if available and is a string\r\n        let userAgent: string | undefined = undefined;\r\n        if (typeof window !== 'undefined' && typeof window.navigator.userAgent === 'string') {\r\n          userAgent = window.navigator.userAgent;\r\n        } else if (account?.userAgent && typeof account.userAgent === 'string') {\r\n          userAgent = account.userAgent;\r\n        }\r\n        if (userAgent) {\r\n          token.fingerprint = crypto.createHash('sha256').update(userAgent).digest('hex');\r\n        }\r\n      }\r\n      // Expiry check (NextAuth handles exp, but add custom error for demo)\r\n      if (token.exp && Date.now() > token.exp * 1000) {\r\n        return { ...token, error: \"SessionExpired\" };\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token.error) {\r\n        throw new Error(\"Session expired\");\r\n      }\r\n      if (token) {\r\n        (session.user as any).role = token.role as string;\r\n        (session.user as any).id = token.id as string;\r\n        (session.user as any).lastLogin = token.lastLogin as string;\r\n        (session.user as any).fingerprint = token.fingerprint as string;\r\n      }\r\n      return session;\r\n    }\r\n  },\r\n  pages: {\r\n    signIn: \"/auth/signin\",\r\n  },\r\n  cookies: {\r\n    sessionToken: {\r\n      name: `__Secure-next-auth.session-token`,\r\n      options: {\r\n        httpOnly: true,\r\n        sameSite: 'lax',\r\n        path: '/',\r\n        secure: process.env.NODE_ENV === 'production',\r\n        maxAge: 30 * 24 * 60 * 60, // 30 days\r\n      }\r\n    },\r\n    callbackUrl: {\r\n      name: `__Secure-next-auth.callback-url`,\r\n      options: {\r\n        sameSite: 'lax',\r\n        path: '/',\r\n        secure: process.env.NODE_ENV === 'production',\r\n      }\r\n    },\r\n    csrfToken: {\r\n      name: `__Host-next-auth.csrf-token`,\r\n      options: {\r\n        httpOnly: true,\r\n        sameSite: 'lax',\r\n        path: '/',\r\n        secure: process.env.NODE_ENV === 'production',\r\n      }\r\n    }\r\n  }\r\n}) "],"names":[],"mappings":";;;;;;;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AALO,MAAM,UAAU;;;;;;AAuBhB,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE;IAC1D,WAAW;QACT,CAAA,GAAA,4JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAgB;gBAC9B,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,IAAI;oBACF,MAAM,OAAO,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BACL,OAAO,YAAY,KAAK;wBAC1B;oBACF;oBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;wBAC3B,OAAO;oBACT;oBAEA,MAAM,kBAAkB,MAAM,CAAA,GAAA,mIAAA,CAAA,UAAO,AAAD,EAAE,YAAY,QAAQ,EAAE,KAAK,QAAQ;oBAEzE,IAAI,CAAC,iBAAiB;wBACpB,OAAO;oBACT;oBAEA,oBAAoB;oBACpB,6BAA6B;oBAC7B,4BAA4B;oBAC5B,oCAAoC;oBACpC,KAAK;oBAEL,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;wBACf,MAAM,KAAK,IAAI;wBACf,WAAW,IAAI,OAAO,WAAW;oBACnC;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,eAAe;oBAC7B,OAAO;gBACT;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;QACvB,WAAW,KAAK,KAAK;IACvB;IACA,KAAK;QACH,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE;YAClD,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,AAAC,KAAa,IAAI;gBAC/B,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,SAAS,GAAG,IAAI,OAAO,WAAW;gBACxC,uEAAuE;gBACvE,IAAI,YAAgC;gBACpC,uCAAqF;;gBAErF,OAAO,IAAI,SAAS,aAAa,OAAO,QAAQ,SAAS,KAAK,UAAU;oBACtE,YAAY,QAAQ,SAAS;gBAC/B;gBACA,IAAI,WAAW;oBACb,MAAM,WAAW,GAAG,qGAAA,CAAA,UAAM,CAAC,UAAU,CAAC,UAAU,MAAM,CAAC,WAAW,MAAM,CAAC;gBAC3E;YACF;YACA,qEAAqE;YACrE,IAAI,MAAM,GAAG,IAAI,KAAK,GAAG,KAAK,MAAM,GAAG,GAAG,MAAM;gBAC9C,OAAO;oBAAE,GAAG,KAAK;oBAAE,OAAO;gBAAiB;YAC7C;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,MAAM,KAAK,EAAE;gBACf,MAAM,IAAI,MAAM;YAClB;YACA,IAAI,OAAO;gBACR,QAAQ,IAAI,CAAS,IAAI,GAAG,MAAM,IAAI;gBACtC,QAAQ,IAAI,CAAS,EAAE,GAAG,MAAM,EAAE;gBAClC,QAAQ,IAAI,CAAS,SAAS,GAAG,MAAM,SAAS;gBAChD,QAAQ,IAAI,CAAS,WAAW,GAAG,MAAM,WAAW;YACvD;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,SAAS;QACP,cAAc;YACZ,MAAM,CAAC,gCAAgC,CAAC;YACxC,SAAS;gBACP,UAAU;gBACV,UAAU;gBACV,MAAM;gBACN,QAAQ,oDAAyB;gBACjC,QAAQ,KAAK,KAAK,KAAK;YACzB;QACF;QACA,aAAa;YACX,MAAM,CAAC,+BAA+B,CAAC;YACvC,SAAS;gBACP,UAAU;gBACV,MAAM;gBACN,QAAQ,oDAAyB;YACnC;QACF;QACA,WAAW;YACT,MAAM,CAAC,2BAA2B,CAAC;YACnC,SAAS;gBACP,UAAU;gBACV,UAAU;gBACV,MAAM;gBACN,QAAQ,oDAAyB;YACnC;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/naazbook/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { handlers } from \"@/auth\"\r\n\r\nexport const { GET, POST } = handlers "],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,sGAAA,CAAA,WAAQ","debugId":null}}]
}